{"version":3,"sources":["mint-page/connection.tsx","Navbar.js","Footer.js","img/crests/crest_4.png","img/crests/crest_5.png","img/diagrams/tree.jpg","img/scenes/artificer_forest.png","Faq.js","img/scenes/moon_monkey_cathedral.png","img/scenes/frog_family.png","Roadmap.js","mint-page/MintCountdown.tsx","mint-page/MintButton.tsx","mint-page/Home.tsx","mint-page/App.tsx","BouncingArrow.tsx","Home.js","img/portraits/ahtan.jpg","img/crest_artist_highlights.png","Team.js","App.js","img/crests/crest_backplate.png","reportWebVitals.js","index.js","mint-page/utils.ts","mint-page/candy-machine.ts"],"names":["SequenceType","DEFAULT_TIMEOUT","sendTransactions","connection","wallet","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","beforeTransactions","afterTransactions","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","partiallySignedTransactions","filter","t","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","console","log","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","StopOnFailure","Promise","all","number","txs","result","getUnixTs","Date","getTime","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","removeSignatureListener","ms","Navbar","useState","navbarOpen","setNavbarOpen","scrollOffset","setScrollOffset","useEffect","setOffset","window","pageYOffset","addEventListener","removeEventListener","id","className","classNames","secondary","innerHeight","open","to","target","href","onClick","Footer","year","getYear","Faq","bgPicture","useRef","bgPictureOffset","setBgPictureOffset","current","offsetTop","x","y","bgPictureX","bgPictureY","style","ref","Roadmap","src","FrogFamily","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","onComplete","classes","renderer","days","hours","minutes","seconds","completed","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","useWallet","useConnection","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","waitForActiveToken","setWaitForActiveToken","mint","removeAccountChangeListener","previousGatewayStatus","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","state","ACTIVE","disabled","gatekeeper","network","gatekeeperNetwork","toBase58","CIVIC_GATEKEEPER_NETWORK","findGatewayToken","gatewayToken","isValid","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","goLiveDate","anchor","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","cluster","anchorWallet","useMemo","signTransaction","refreshCandyMachineState","useCallback","hideDuration","Connection","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","isWLUser","userPrice","price","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","parseInt","amount","tokenMint","valid","gte","getBalance","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","mode","burnEveryTime","expireOnUse","connected","program","createAccountsForMint","setupMint","txTimeout","mintOneToken","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","loop","Container","maxWidth","position","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","CANDY_MACHINE_PROGRAM","clusterUrl","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","sx","lineHeight","bgcolor","paddingTop","createTheme","palette","type","process","getCandyMachineId","clusterApiUrl","App","endpoint","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","BouncingArrow","visible","transition","opacity","sectionCommunity","sectionCommunityOffset","setSectionCommunityOffset","heroBgX","heroBgY","heroFgX","heroFgY","communityBgX","communityBgY","bgPosition","backgroundPosition","Crest1","alt","TreeDiagram","ArtificerForest","Crest2","Team","portrait1","portraitOffset","setPortraitOffset","Ahtan","AhtanHighlights","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","getProgramState","fetchIdl","idl","account","fetch","getCurrentBlockTime","getSlot","getBlockTime","currentBlockTime","timeDiff","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","whitelistToken","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txns","mintTxn"],"mappings":"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","file":"static/js/main.1dfbd0c9.chunk.js","sourcesContent":["/* eslint-disable */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  RpcResponseAndContext,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n} from \"@solana/web3.js\";\n\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport const DEFAULT_TIMEOUT = 60000;\n\nexport const getErrorForTransaction = async (\n  connection: Connection,\n  txid: string\n) => {\n  // wait for all confirmation before geting transaction\n  await connection.confirmTransaction(txid, \"max\");\n\n  const tx = await connection.getParsedConfirmedTransaction(txid);\n\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  return errors;\n};\n\nexport enum SequenceType {\n  Sequential,\n  Parallel,\n  StopOnFailure,\n}\n\nexport async function sendTransactionsWithManualRetry(\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[][],\n  signers: Keypair[][]\n): Promise<(string | undefined)[]> {\n  let stopPoint = 0;\n  let tries = 0;\n  let lastInstructionsLength = null;\n  const toRemoveSigners: Record<number, boolean> = {};\n  instructions = instructions.filter((instr, i) => {\n    if (instr.length > 0) {\n      return true;\n    } else {\n      toRemoveSigners[i] = true;\n      return false;\n    }\n  });\n  let ids: string[] = [];\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n\n  while (stopPoint < instructions.length && tries < 3) {\n    instructions = instructions.slice(stopPoint, instructions.length);\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\n    else tries = 0;\n\n    try {\n      if (instructions.length === 1) {\n        const id = await sendTransactionWithRetry(\n          connection,\n          wallet,\n          instructions[0],\n          filteredSigners[0],\n          \"single\"\n        );\n        ids.push(id.txid);\n        stopPoint = 1;\n      } else {\n        const { txs } = await sendTransactions(\n          connection,\n          wallet,\n          instructions,\n          filteredSigners,\n          SequenceType.StopOnFailure,\n          \"single\"\n        );\n        ids = ids.concat(txs.map((t) => t.txid));\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    console.log(\n      \"Died on \",\n      stopPoint,\n      \"retrying from instruction\",\n      instructions[stopPoint],\n      \"instructions length is\",\n      instructions.length\n    );\n    lastInstructionsLength = instructions.length;\n  }\n\n  return ids;\n}\n\nexport const sendTransactions = async (\n  connection: Connection,\n  wallet: any,\n  instructionSet: TransactionInstruction[][],\n  signersSet: Keypair[][],\n  sequenceType: SequenceType = SequenceType.Parallel,\n  commitment: Commitment = \"singleGossip\",\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n  block?: BlockhashAndFeeCalculator,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = []\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  const unsignedTxns: Transaction[] = beforeTransactions;\n\n  if (!block) {\n    block = await connection.getRecentBlockhash(commitment);\n  }\n\n  for (let i = 0; i < instructionSet.length; i++) {\n    const instructions = instructionSet[i];\n    const signers = signersSet[i];\n\n    if (instructions.length === 0) {\n      continue;\n    }\n\n    const transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = block.blockhash;\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n\n    unsignedTxns.push(transaction);\n  }\n  unsignedTxns.push(...afterTransactions);\n\n  const partiallySignedTransactions = unsignedTxns.filter((t) =>\n    t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  const fullySignedTransactions = unsignedTxns.filter(\n    (t) => !t.signatures.find((sig) => sig.publicKey.equals(wallet.publicKey))\n  );\n  let signedTxns = await wallet.signAllTransactions(\n    partiallySignedTransactions\n  );\n  signedTxns = fullySignedTransactions.concat(signedTxns);\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n\n  console.log(\n    \"Signed txns length\",\n    signedTxns.length,\n    \"vs handed in length\",\n    instructionSet.length\n  );\n  for (let i = 0; i < signedTxns.length; i++) {\n    const signedTxnPromise = sendSignedTransaction({\n      connection,\n      signedTransaction: signedTxns[i],\n    });\n\n    if (sequenceType !== SequenceType.Parallel) {\n      try {\n        await signedTxnPromise.then(({ txid, slot }) =>\n          successCallback(txid, i)\n        );\n        pendingTxns.push(signedTxnPromise);\n      } catch (e) {\n        console.log(\"Failed at txn index:\", i);\n        console.log(\"Caught failure:\", e);\n\n        failCallback(signedTxns[i], i);\n        if (sequenceType === SequenceType.StopOnFailure) {\n          return {\n            number: i,\n            txs: await Promise.all(pendingTxns),\n          };\n        }\n      }\n    } else {\n      pendingTxns.push(signedTxnPromise);\n    }\n  }\n\n  if (sequenceType !== SequenceType.Parallel) {\n    const result = await Promise.all(pendingTxns);\n    return { number: signedTxns.length, txs: result };\n  }\n\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[] | Transaction,\n  signers: Keypair[],\n  awaitConfirmation = true,\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction: Transaction;\n  if (!Array.isArray(instructions)) {\n    transaction = instructions;\n  } else {\n    transaction = new Transaction();\n    instructions.forEach((instruction) => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n\n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map((s) => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map((s) => s.publicKey)\n      );\n    }\n\n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  }\n\n  const rawTransaction = transaction.serialize();\n  const options = {\n    skipPreflight: true,\n    commitment,\n  };\n\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\n  let slot = 0;\n\n  if (awaitConfirmation) {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      DEFAULT_TIMEOUT,\n      connection,\n      commitment\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    slot = confirmation?.slot || 0;\n\n    if (confirmation?.err) {\n      const errors = await getErrorForTransaction(connection, txid);\n\n      console.log(errors);\n      throw new Error(`Raw transaction ${txid} failed`);\n    }\n  }\n\n  return { txid, slot };\n};\n\nexport const sendTransactionWithRetry = async (\n  connection: Connection,\n  wallet: any,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = \"singleGossip\",\n  includesFeePayer: boolean = false,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n) => {\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      wallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n  if (!includesFeePayer) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  const { txid, slot } = await sendSignedTransaction({\n    connection,\n    signedTransaction: transaction,\n  });\n\n  return { txid, slot };\n};\n\nexport const getUnixTs = () => {\n  return new Date().getTime() / 1000;\n};\n\nexport async function sendSignedTransaction({\n  signedTransaction,\n  connection,\n  timeout = DEFAULT_TIMEOUT,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  timeout?: number;\n}): Promise<{ txid: string; slot: number }> {\n  const rawTransaction = signedTransaction.serialize();\n\n  const startTime = getUnixTs();\n  let slot = 0;\n  const txid: TransactionSignature = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    }\n  );\n\n  console.log(\"Started awaiting confirmation for\", txid);\n\n  let done = false;\n  (async () => {\n    while (!done && getUnixTs() - startTime < timeout) {\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(500);\n    }\n  })();\n  try {\n    const confirmation = await awaitTransactionSignatureConfirmation(\n      txid,\n      timeout,\n      connection,\n      \"recent\",\n      true\n    );\n\n    if (!confirmation)\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n\n    if (confirmation.err) {\n      console.error(confirmation.err);\n      throw new Error(\"Transaction failed: Custom instruction error\");\n    }\n\n    slot = confirmation?.slot || 0;\n  } catch (err: any) {\n    console.error(\"Timeout Error caught\", err);\n    if (err.timeout) {\n      throw new Error(\"Timed out awaiting confirmation on transaction\");\n    }\n    let simulateResult: SimulatedTransactionResponse | null = null;\n    try {\n      simulateResult = (\n        await simulateTransaction(connection, signedTransaction, \"single\")\n      ).value;\n    } catch (e) {}\n    if (simulateResult && simulateResult.err) {\n      if (simulateResult.logs) {\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n          const line = simulateResult.logs[i];\n          if (line.startsWith(\"Program log: \")) {\n            throw new Error(\n              \"Transaction failed: \" + line.slice(\"Program log: \".length)\n            );\n          }\n        }\n      }\n      throw new Error(JSON.stringify(simulateResult.err));\n    }\n    // throw new Error('Transaction failed');\n  } finally {\n    done = true;\n  }\n\n  console.log(\"Latency\", txid, getUnixTs() - startTime);\n  return { txid, slot };\n}\n\nasync function simulateTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching\n  );\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config: any = { encoding: \"base64\", commitment };\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n  return res.result;\n}\n\nasync function awaitTransactionSignatureConfirmation(\n  txid: TransactionSignature,\n  timeout: number,\n  connection: Connection,\n  commitment: Commitment = \"recent\",\n  queryStatus = false\n): Promise<SignatureStatus | null | void> {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import { useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport { FaTwitter, FaInstagram, FaMedium } from \"react-icons/fa\";\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from \"react-icons/md\";\nimport { HashLink as Link } from \"react-router-hash-link\";\n\nconst Navbar = () => {\n  const [navbarOpen, setNavbarOpen] = useState(false);\n  const [scrollOffset, setScrollOffset] = useState(0);\n\n  useEffect(() => {\n    const setOffset = () => {\n      setScrollOffset(window.pageYOffset);\n    };\n    window.addEventListener(\"scroll\", setOffset);\n    return function cleanupListener() {\n      window.removeEventListener(\"scroll\", setOffset);\n    };\n  }, []);\n\n  return (\n    <div\n      id=\"navbar\"\n      className={classNames(\"navbar\", {\n        secondary: scrollOffset > window.innerHeight - 70,\n        open: navbarOpen,\n      })}\n    >\n      <div className=\"left\">\n        <Link to=\"/#\" className=\"logo\">\n          <h3>Lineage</h3>\n        </Link>\n        <Link to=\"/#about\">About</Link>\n        <Link to=\"/#faq\">FAQ</Link>\n        <Link to=\"/#roadmap\">Roadmap</Link>\n        <a\n          className=\"left-bordered\"\n          target=\"_blank\"\n          href=\"https://twitter.com/search?q=%22Encyclopedia%20entry%22%20(from%3ALineageNFT)%20-filter%3Areplies&src=typed_query\"\n        >\n          Lore\n        </a>\n        <Link to=\"/team#\">Team</Link>\n        <Link to=\"/mint#\">Mint</Link>\n      </div>\n      <div className=\"right\">\n        <a\n          className=\"link--social\"\n          target=\"_blank\"\n          href=\"https://twitter.com/lineagenft\"\n        >\n          <FaTwitter />\n        </a>\n        <a\n          href=\"https://discord.gg/FbxxaqVVCU\"\n          className=\"button\"\n          target=\"_blank\"\n        >\n          Join the Discord\n        </a>\n      </div>\n      <div className=\"navbar-controls\">\n        <a\n          className=\"arrow-down\"\n          onClick={() => {\n            setNavbarOpen(true);\n          }}\n        >\n          <MdKeyboardArrowDown />\n        </a>\n        <a\n          className=\"arrow-up\"\n          onClick={() => {\n            setNavbarOpen(false);\n          }}\n        >\n          <MdKeyboardArrowUp />\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import classNames from 'classnames';\nimport { FaDiscord, FaTwitter, FaInstagram, FaMedium } from 'react-icons/fa';\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from 'react-icons/md'\nimport { HashLink as Link } from 'react-router-hash-link';\n\nconst Footer = () => {\n  const year = new Date().getYear() + 1900;\n\n  return (\n    <div className=\"section--footer\">\n      <div className=\"content\">\n        <div className=\"container-fluid\">\n          <div className=\"col-sm-6\">\n            <Link to=\"/#\" className=\"logo\"><h3>Lineage</h3></Link>\n            <p>Lineage is a connected NFT project set in the world of Kharth</p>\n            <p className=\"copyright\">©{year} Lineage. All rights reserved.</p>\n          </div>\n          <div className=\"col-sm-offset-3 col-sm-3\">\n            <div className=\"navigation\">\n              {/* <Link to=\"/#\">Home</Link> */}\n              {/* <Link to=\"/white_paper#\">White Paper</Link> */}\n              {/* <Link to=\"/tos#\">Terms of Service</Link> */}\n            </div>\n            <div className=\"socials\">\n              <a className=\"link--social\" target=\"_blank\"><FaDiscord /></a>\n              <a className=\"link--social\" target=\"_blank\" href=\"https://twitter.com/lineagenft\"><FaTwitter /></a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/crest_4.55cc4028.png\";","export default __webpack_public_path__ + \"static/media/crest_5.62b48e94.png\";","export default __webpack_public_path__ + \"static/media/tree.c2b28834.jpg\";","export default __webpack_public_path__ + \"static/media/artificer_forest.18b171ac.png\";","import React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport MoonMonkeyCathedral from './img/scenes/moon_monkey_cathedral.png';\n\nconst Faq = () => {\n  const bgPicture = useRef();\n  const [scrollOffset, setScrollOffset] = useState(0);\n  const [bgPictureOffset, setBgPictureOffset] = useState();\n\n  useEffect(() => {\n    const setOffset = () => {\n      setScrollOffset(window.pageYOffset);\n      setBgPictureOffset(bgPicture?.current?.offsetTop);\n    }\n    window.addEventListener('scroll', setOffset);\n    return function cleanupListener() {\n      window.removeEventListener('scroll', setOffset);\n    }\n  }, []);\n  \n  const bgPictureX = (bgPictureOffset-scrollOffset)/200 + 50;\n  const bgPictureY = (bgPictureOffset-scrollOffset)/200 + 50;\n  const bgPosition = (x, y) => {\n    return { 'backgroundPosition': `${x}% ${y}%` };\n  }\n\n  return (\n    <div className=\"section section--faq\" id=\"faq\">\n      <div className=\"content\">\n        <div className=\"container-fluid\">\n          <div className=\"row margin-bottom-6\">\n            <div className=\"col-md-offset-0 col-md-12\">\n              <h2 className=\"text--center\">Lineage FAQ</h2>\n            </div>\n          </div>\n\n          <div className=\"row equal\">\n          \n            <div className=\"col-md-8\">\n              <div className=\"card-wrapper\">\n                <div className=\"card\">\n                  <div className=\"number\">1</div>\n                  <div className=\"content-chunk\">\n                    <h4>What is Lineage?</h4>\n                    <p>Lineage is an interconnected NFT collection built on top of a <a target=\"_blank\" href=\"https://twitter.com/search?q=%22Encyclopedia%20entry%22%20(from%3ALineageNFT)%20-filter%3Areplies&src=typed_query\" className=\"colored\">vast world</a>. When you mint your family CREST, you'll be able to discover your ancestor's and descendants (other NFT holders) and uncover together what lore sets you apart from one another. </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"card-wrapper\">\n                <div className=\"card\">\n                  <div className=\"number\">2</div>\n                  <div className=\"content-chunk\">\n                    <h4>Why join Lineage?</h4>\n                    <p>Lineage is a community for D&D players, world builders, and anyone who loves fantasy. You'll love it here if you're a nerd like us. <a href=\"https://discord.gg/FbxxaqVVCU\" target=\"_blank\" className=\"colored\">Join the community</a> to connect with your family line, discover your lore, or contribute art to the worldbuilding.</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"card-wrapper\">\n                <div className=\"card\">\n                  <div className=\"number\">3</div>\n                  <div className=\"content-chunk\">\n                    <h4>What do I get when I mint a Lineage NFT?</h4>\n                    <p>To join the community, you mint a CREST that represents a family in the world of Kharth. Upon mint, we create generative lore that is unique to your family and based on your ancestry. Your mint will place you in one of eight races, and in one of countless family lines. Through our <a className=\"colored\">Ancestry Explorer</a>, you'll be able to uncover your ancestor and descendent CRESTs and connect with the NFT holders that make up your bloodline.</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"card-wrapper\">\n                <div className=\"card\">\n                  <div className=\"number\">4</div>\n                  <div className=\"content-chunk\">\n                    <h4>What is the inherent value of a CREST?</h4>\n                    <p>Ultimately, it’s a creative project, and it’s worth whatever you deem it to be worth. But:\n                    <ul>\n                      <li>CRESTs are the first project where the tokens have relationships between each other</li>\n                      <li>Each CREST has its own generative backstory</li>\n                      <li>The art looks amazing, depicts your family's backstory, and ties into our world building</li>\n                    </ul>\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"card-wrapper\">\n                <div className=\"card\">\n                  <div className=\"number\">5</div>\n                  <div className=\"content-chunk\">\n                    <h4>Wen mint?</h4>\n                    <p>We're minting 4000 CRESTs in March. The mint price is X ETH to keep the community as accessible as possible.</p>\n                    <p>We're builders not marketers. We're not advertising on tiktok, we're not doing tons of giveaways and promotions. We'd rather just ask for less ETH and make it easy for anyone to get involved.</p>\n                  </div>\n                </div>\n              </div>\n\n            </div>\n            <div className=\"col-md-4 bg-moon-monkey\" style={ bgPosition(bgPictureX, bgPictureY) } ref={bgPicture}>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Faq;\n","export default __webpack_public_path__ + \"static/media/moon_monkey_cathedral.04613b08.png\";","export default __webpack_public_path__ + \"static/media/frog_family.6ee4c2ee.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport FrogFamily from './img/scenes/frog_family.png';\n\nconst Roadmap = () => {\n  return (\n    <div className=\"section section--roadmap\" id=\"roadmap\">\n      <div className=\"content\">\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-offset-6 col-md-6\">\n              <h2>Lineage Roadmap</h2>\n            </div>\n            <div className=\"col-md-6\">\n              <img src={FrogFamily} />\n            </div>\n            <div className=\"col-md-6\">\n              <p>We have a strong foundational belief that roadmaps <b>should not</b> be set in stone before the community is grown. That being said, CRESTs are designed to expose their data for those that want to create on top. We're builders at heart and so we're super excited to build more for the community.</p>\n              <p>Some ideas we'd like to explore in 2022:\n                <ul>\n                  <li>Ship our <b>Ancestry Explorer</b> tool so CREST-holders can easily discover their lineage and what their CREST lore means</li>\n                  <li>Spin up a <b>Lineage Merch Store</b>, <b>Twitter Banner Creator</b>, and other fun things for the community</li>\n                  <li>Launch an 8000 piece <b>PFP project</b>, 50% of the collection reserved for OG crest holders</li>\n                </ul>\n              </p>\n              <p>Other ideas on our list:\n                <ul>\n                  <li>Have stories and <b>lore professionally written and narrated</b> for the community, and run auctions where 100% of funds go to charity and back to the community</li>\n                  {/* <li>Create a <b>Lineage D&D campaign guide</b> set in the world of Kharth</li> */}\n                  <li>Design a <b>Lineage DAO</b> that allows the community to contribute and canonize lore on chain to grow the intellectual property</li>\n                </ul>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Roadmap;\n","import { Paper } from \"@material-ui/core\";\nimport Countdown from \"react-countdown\";\nimport { Theme, createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      padding: theme.spacing(0),\n      \"& > *\": {\n        margin: theme.spacing(0.4),\n        width: theme.spacing(6),\n        height: theme.spacing(6),\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignContent: \"center\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        background: \"#384457\",\n        color: \"white\",\n        borderRadius: 5,\n        fontSize: 10,\n      },\n    },\n    done: {\n      display: \"flex\",\n      margin: 0,\n      marginBottom: theme.spacing(0.5),\n      height: theme.spacing(3.5),\n      padding: theme.spacing(1),\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      background: \"#384457\",\n      color: \"white\",\n      borderRadius: 5,\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n    item: {\n      fontWeight: \"bold\",\n      fontSize: 18,\n    },\n  })\n);\n\ninterface MintCountdownProps {\n  date: Date | undefined;\n  style?: React.CSSProperties;\n  status?: string;\n  onComplete?: () => void;\n}\n\ninterface MintCountdownRender {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  completed: boolean;\n}\n\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\n  date,\n  status,\n  style,\n  onComplete,\n}) => {\n  const classes = useStyles();\n  const renderCountdown = ({\n    days,\n    hours,\n    minutes,\n    seconds,\n    completed,\n  }: MintCountdownRender) => {\n    hours += days * 24;\n    if (completed) {\n      return status ? <span className={classes.done}>{status}</span> : null;\n    } else {\n      return (\n        <div className={classes.root} style={style}>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {hours < 10 ? `0${hours}` : hours}\n            </span>\n            <span>hrs</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {minutes < 10 ? `0${minutes}` : minutes}\n            </span>\n            <span>mins</span>\n          </Paper>\n          <Paper elevation={0}>\n            <span className={classes.item}>\n              {seconds < 10 ? `0${seconds}` : seconds}\n            </span>\n            <span>secs</span>\n          </Paper>\n        </div>\n      );\n    }\n  };\n\n  if (date) {\n    return (\n      <Countdown\n        date={date}\n        onComplete={onComplete}\n        renderer={renderCountdown}\n      />\n    );\n  } else {\n    return null;\n  }\n};\n","import styled from \"styled-components\";\nimport Button from \"@material-ui/core/Button\";\nimport { CandyMachineAccount } from \"./candy-machine\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { useConnection, useWallet } from \"@solana/wallet-adapter-react\";\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from \"@identity.com/solana-gateway-ts\";\nimport { CIVIC_GATEKEEPER_NETWORK } from \"./utils\";\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  background: linear-gradient(\n    180deg,\n    rgba(255, 252, 246, 1) 0%,\n    rgb(252 236 203) 100%\n  );\n  color: gold;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n  const [waitForActiveToken, setWaitForActiveToken] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return \"SOLD OUT\";\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return \"WHITELIST MINT\";\n    }\n\n    return \"MINT\";\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find((state) => previousGatewayStatus === state) &&\n      !invalidToStates.find((state) => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log(\"change: \", GatewayStatus[gatewayStatus]);\n  }, [waitForActiveToken, previousGatewayStatus, gatewayStatus]);\n\n  useEffect(() => {\n    if (waitForActiveToken && gatewayStatus === GatewayStatus.ACTIVE) {\n      console.log(\"Minting after token active\");\n      setWaitForActiveToken(false);\n      onMint();\n    }\n  }, [waitForActiveToken, gatewayStatus, onMint]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === CIVIC_GATEKEEPER_NETWORK) {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              setWaitForActiveToken(true);\n              await requestGatewayToken();\n              console.log(\"after: \", gatewayStatus);\n            }\n          } else if (\n            network === \"ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE\" ||\n            network === \"tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt\"\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                \"_blank\"\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  \"confirmed\"\n                )\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\n\nimport styled from \"styled-components\";\nimport { Container, Snackbar } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Alert from \"@mui/material/Alert\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\nimport { useWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from \"./candy-machine\";\nimport { AlertState, formatNumber, getAtaForMint, toDate } from \"./utils\";\nimport { MintCountdown } from \"./MintCountdown\";\nimport { MintButton } from \"./MintButton\";\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: gold;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n  error?: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const cluster = props.network;\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = \"confirmed\") => {\n      if (!anchorWallet) {\n        return;\n      }\n      if (props.error !== undefined) {\n        setAlertState({\n          open: true,\n          message: props.error,\n          severity: \"error\",\n          hideDuration: null,\n        });\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection\n          );\n          let active = cndy?.state.goLiveDate\n            ? cndy?.state.goLiveDate.toNumber() < new Date().getTime() / 1000\n            : false;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                \"There was a problem fetching whitelist token balance\"\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log(\"There was a problem fetching SPL token balance\");\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey)\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            const limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith(\"failed to get info about account\")\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: \"error\",\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: \"error\",\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: \"error\",\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.error, props.rpcHost]\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = []\n  ) => {\n    try {\n      setIsUserMinting(true);\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: \"Adventurer, sign your account setup transaction!\",\n            severity: \"info\",\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                \"Setup transaction succeeded. Sign the minting transaction adventurer!\",\n              severity: \"info\",\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message:\n                \"Mint failed! Try again, and message us in Discord if you need help!\",\n              severity: \"error\",\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message:\n              \"Welcome to the gates of Kharth! Sign the minting transaction to enter.\",\n            severity: \"info\",\n          });\n        }\n\n        const mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              \"processed\"\n            );\n          console.log(\"Metadata status: \", !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          const remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Welcome to Kharth!\",\n            severity: \"success\",\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState(\"processed\");\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.\",\n            severity: \"error\",\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message:\n              \"Mint failed! Try again, and message us in Discord if you need help!\",\n            severity: \"error\",\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message =\n        error.msg ||\n        \"Mint failed! Try again, and message us in Discord if you need help!\";\n      if (!error.msg) {\n        if (!error.message) {\n          message = \"Transaction timeout! Please try again.\";\n        } else if (error.message.indexOf(\"0x137\")) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds dear adventurer. Add SOL to your wallet and try again!`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <Container>\n      <Container maxWidth=\"xs\" style={{ position: \"relative\" }}>\n        <Paper className=\"mint-container\">\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: \"bold\",\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Price\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: \"bold\" }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: \"bold\" }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: \"flex-end\" }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? \"COMPLETED\"\n                              : \"LIVE\"\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: \"bold\" }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    cluster={cluster}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={(val) => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={(val) => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n          sx={{\n            lineHeight: \"20px\",\n            fontSize: \"11px\",\n            bgcolor: \"#fffcf6\",\n            \"& .MuiAlert-icon, & .MuiAlert-action\": {\n              alignItems: \"center\",\n            },\n            \"& .MuiAlert-action\": {\n              paddingTop: 0,\n            },\n          }}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport Home from \"./Home\";\nimport { DEFAULT_TIMEOUT } from \"./connection\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletExtensionWallet,\n  getSolletWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst theme = createTheme({\n  palette: {\n    type: \"dark\",\n  },\n});\n\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\n  try {\n    return new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID!);\n  } catch (e) {\n    console.log(\"Failed to construct CandyMachineId\", e);\n    return undefined;\n  }\n};\n\nlet error: string | undefined = undefined;\n\nif (process.env.REACT_APP_SOLANA_NETWORK === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_NETWORK value in the .env file doesn't look right! The options are devnet and mainnet-beta!\";\n} else if (process.env.REACT_APP_SOLANA_RPC_HOST === undefined) {\n  error =\n    \"Your REACT_APP_SOLANA_RPC_HOST value in the .env file doesn't look right! Make sure you enter it in as a plain-text url (i.e., https://metaplex.devnet.rpcpool.com/)\";\n}\n\nconst candyMachineId = getCandyMachineId();\nconst network = (process.env.REACT_APP_SOLANA_NETWORK ??\n  \"devnet\") as WalletAdapterNetwork;\nconst rpcHost =\n  process.env.REACT_APP_SOLANA_RPC_HOST ?? anchor.web3.clusterApiUrl(\"devnet\");\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n      getPhantomWallet(),\n      getSolflareWallet(),\n      getSlopeWallet(),\n      getSolletWallet({ network }),\n      getSolletExtensionWallet({ network }),\n    ],\n    []\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <ConnectionProvider endpoint={endpoint}>\n        <WalletProvider wallets={wallets} autoConnect>\n          <WalletDialogProvider>\n            <Home\n              candyMachineId={candyMachineId}\n              connection={connection}\n              txTimeout={DEFAULT_TIMEOUT}\n              rpcHost={rpcHost}\n              network={network}\n              error={error}\n            />\n          </WalletDialogProvider>\n        </WalletProvider>\n      </ConnectionProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","const BouncingArrow = ({ visible }: { visible: boolean }) => (\n  <div\n    className=\"arrow-container\"\n    style={{ transition: \"400ms all\", opacity: visible ? 1 : 0 }}\n  >\n    <div className=\"arrow bounce\">\n      <div className=\"arrow-l\"></div>\n      <div className=\"arrow-r\"></div>\n    </div>\n  </div>\n);\n\nexport default BouncingArrow;\n","import React, { useState, useEffect, useRef, useMemo } from \"react\";\n\nimport Crest1 from \"./img/crests/crest_4.png\";\nimport Crest2 from \"./img/crests/crest_5.png\";\n\nimport TreeDiagram from \"./img/diagrams/tree.jpg\";\n\nimport ArtificerForest from \"./img/scenes/artificer_forest.png\";\n\nimport Faq from \"./Faq\";\nimport Roadmap from \"./Roadmap\";\nimport Mint from \"./mint-page/App\";\n\nimport BouncingArrow from \"./BouncingArrow\";\n\nconst Home = () => {\n  const sectionCommunity = useRef();\n  const [scrollOffset, setScrollOffset] = useState(0);\n  const [sectionCommunityOffset, setSectionCommunityOffset] = useState();\n\n  useEffect(() => {\n    const setOffset = () => {\n      setScrollOffset(window.pageYOffset);\n      setSectionCommunityOffset(sectionCommunity?.current?.offsetTop);\n    };\n    window.addEventListener(\"scroll\", setOffset);\n    return function cleanupListener() {\n      window.removeEventListener(\"scroll\", setOffset);\n    };\n  }, []);\n\n  const heroBgX = scrollOffset / 40 + 50;\n  const heroBgY = scrollOffset / 40 + 50;\n  const heroFgX = scrollOffset / 60 + 50;\n  const heroFgY = scrollOffset / 60 + 50;\n  // const percentCommunity = window.innerHeight/(sectionCommunityOffset-scrollOffset);\n  const communityBgX = (sectionCommunityOffset - scrollOffset) / 25 + 50;\n  const communityBgY = (sectionCommunityOffset - scrollOffset) / 25 + 30;\n  const bgPosition = (x, y) => {\n    return { backgroundPosition: `${x}% ${y}%` };\n  };\n\n  return (\n    <>\n      {/* <div className=\"modal-bg\">\n        <div className=\"modal-fg\">\n          <h3>Title</h3>\n          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi ac vestibulum erat. Vivamus molestie turpis sem, eu placerat metus placerat ac. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Maecenas pretium diam ac ex rutrum venenatis. Nunc ex enim, sollicitudin quis libero vel, varius bibendum dui. Etiam vulputate nunc sit amet auctor pellentesque. Fusce at varius sapien, vel hendrerit felis. Integer iaculis turpis ac rhoncus tincidunt. Vestibulum euismod elit ut diam condimentum ultricies. Donec non tristique erat, eget vestibulum velit.</p>\n          <a className=\"button\">Got it</a>\n        </div>\n      </div> */}\n\n      <div className=\"section--hero\" style={bgPosition(heroBgX, heroBgY)}>\n        <div className=\"foreground\" style={bgPosition(heroFgX, heroFgY)}></div>\n        <img src={Crest1} alt=\"family crest\" />\n        <p>\n          <span className=\"logo\">Lineage</span> is a connected NFT project set\n          in the world of Kharth\n        </p>\n        <Mint />\n        {/* 800 is very, VERY arbitrary, its just where the user should be mostly scrolled into the next page */}\n        <BouncingArrow visible={scrollOffset < 250} />\n      </div>\n\n      <div className=\"section section--about section--about--top\" id=\"about\">\n        <div className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row\">\n              <div className=\"col-md-offset-3 col-md-6\">\n                <h2>A CREST is your entrance into Lineage.</h2>\n                <p>\n                  Each CREST is generative art with generative lore - the pieces\n                  of your family CREST identify significant historical events\n                  and details that set you apart from the CRESTs of your{\" \"}\n                  <b>ancestors</b> and <b>descendants.</b>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"slider\">\n        <div className=\"slider-row\"></div>\n      </div>\n\n      <div className=\"section section--about section--about--bottom\">\n        <div className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"row margin-bottom-6\">\n              <div className=\"col-md-offset-3 col-md-6\">\n                <h2>\n                  Your CREST represents your family’s unique place in its\n                  lineage.\n                </h2>\n                <p>\n                  Lineage CRESTs (your NFT) are connected to one another via\n                  Lineages. Your Lineage is all the families you descended from;\n                  all of your ancestors and families from you.\n                </p>\n                <img src={TreeDiagram} />\n              </div>\n            </div>\n\n            <div className=\"row margin-bottom-6\">\n              <div className=\"col-md-offset-3 col-md-6\">\n                <h2>\n                  Minting seeds the world with lore and the community expands\n                  it.\n                </h2>\n                <p>\n                  When you mint a Lineage CREST, we generate lore for why the\n                  represented family diverged from their ancestors. This lore\n                  will seed the worldbuilding that the community can take on.\n                </p>\n                <img src={ArtificerForest} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Faq />\n      <Roadmap />\n\n      <div\n        className=\"section section--community\"\n        style={bgPosition(communityBgX, communityBgY)}\n        ref={sectionCommunity}\n      >\n        <div className=\"content\">\n          <div className=\"container-fluid\">\n            <div className=\"col-sm-6\">\n              <br />\n              <br />\n              <h2>Join the Community</h2>\n              <p>\n                The story has already begun. Suit up for adventure by joining\n                our discord and preparing for launch.\n              </p>\n              <a\n                href=\"https://discord.gg/FbxxaqVVCU\"\n                className=\"button\"\n                target=\"_blank\"\n              >\n                Join the Discord\n              </a>\n              <br />\n              <br />\n            </div>\n            <div className=\"col-sm-6\">\n              <img src={Crest2} alt=\"family crest\" className=\"crest\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","export default __webpack_public_path__ + \"static/media/ahtan.41f2db6a.jpg\";","export default __webpack_public_path__ + \"static/media/crest_artist_highlights.f2b345c8.png\";","import React, { useState, useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport Ahtan from './img/portraits/ahtan.jpg';\nimport AhtanHighlights from './img/crest_artist_highlights.png';\nimport { FaTwitter, FaLinkedin } from 'react-icons/fa';\n\nconst Team = () => {\n  const portrait1 = useRef();\n  const [scrollOffset, setScrollOffset] = useState(0);\n  const [portraitOffset, setPortraitOffset] = useState();\n\n  useEffect(() => {\n    const setOffset = () => {\n      setScrollOffset(window.pageYOffset);\n      setPortraitOffset(portrait1?.current?.offsetTop);\n    }\n    window.addEventListener('scroll', setOffset);\n    return function cleanupListener() {\n      window.removeEventListener('scroll', setOffset);\n    }\n  }, []);\n  \n  const bgPictureX = (portraitOffset-scrollOffset)/15 + 30;\n  const bgPictureY = (portraitOffset-scrollOffset)/15 + 30;\n  const bgPosition = (x, y) => {\n    return { 'backgroundPosition': `${x}% ${y}%` };\n  }\n\n  return (\n    <div className=\"section\" id=\"team\">\n      <div className=\"content\">\n        <div className=\"container-fluid\">\n          <div className=\"row margin-bottom-2\">\n            <div className=\"col-sm-12\">\n              <h2>Our Fellowship</h2>\n              <p>A huge thank you to everyone making Lineage a reality. <a href=\"https://discord.gg/FbxxaqVVCU\" target=\"_blank\" className=\"colored\">Join the discord</a> to meet the amazing members of our team.</p>\n            </div>\n          </div>\n          <div className=\"row margin-bottom-6\">\n            <div className=\"col-sm-12\">\n              <h3>The founding folk</h3>\n            </div>\n            <div className=\"col-sm-4\">\n              <div className=\"profile-card\">\n                <div className=\"portrait-lucas\" style={ bgPosition(bgPictureX, bgPictureY) } ref={portrait1}></div>\n                <div className=\"content-chunk\">\n                  <h4>Lucas<br /><span className=\"title\">ETH Alchemist</span></h4>\n                  <p>7+ years of software development experience. Formerly @ Apple. Fantasy nerd since age 4.</p>\n                  <div className=\"socials\">\n                    <a className=\"link--social\" target=\"_blank\" href=\"https://www.linkedin.com/in/lucasdellabella/\"><FaLinkedin /></a>\n                    <a className=\"link--social\" target=\"_blank\" href=\"https://twitter.com/heylucas_eth\"><FaTwitter /></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"col-sm-4\">\n              <div className=\"profile-card\">\n                <div className=\"portrait-saqif\" style={ bgPosition(bgPictureX, bgPictureY) }></div>\n                <div className=\"content-chunk\">\n                  <h4>Saqif<br /><span className=\"title\">Web Artificer</span></h4>\n                  <p>7+ years of web development experience. Formerly @ Yelp. Fan of the Sugandese Universe.</p>\n                  <div className=\"socials\">\n                    <a className=\"link--social\" target=\"_blank\" href=\"https://www.linkedin.com/in/saqif/\"><FaLinkedin /></a>\n                    <a className=\"link--social\" target=\"_blank\" href=\"https://twitter.com/FungeMeButt\"><FaTwitter /></a>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"col-sm-4\">\n              <div className=\"profile-card\">\n                <div className=\"portrait-michael\" style={ bgPosition(bgPictureX, bgPictureY) }></div>\n                <div className=\"content-chunk\">\n                  <h4>Michael<br /><span className=\"title\">Lore Wizard</span></h4>\n                  <p>2000+ hours of GM experience. Die hard critter and Dwarven Forge addict. Formerly @ GAP Inc.</p>\n                  <div className=\"socials\">\n                    <a className=\"link--social\" target=\"_blank\" href=\"https://www.linkedin.com/in/michaelgguo/\"><FaLinkedin /></a>\n                    {/* <a className=\"link--social\" target=\"_blank\" href=\"#\"><FaTwitter /></a> */}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"row margin-bottom-2\">\n            <div className=\"col-sm-12\">\n              <h3>Craftsman of the crests</h3>\n            </div>\n\n            {/* Ahtan */}\n            <div className=\"col-md-3\">\n              <div className=\"profile-card-small\">\n                <img src={Ahtan} alt=\"Ahtan\"/>\n                <div className=\"content-chunk\">\n                  <a target=\"_blank\" href=\"https://www.instagram.com/ahtan_delmundo/\">\n                    <h4>@ahtan_delmundo<br /><span className=\"title\">Crest Artisan</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-md-9\">\n              <br />\n              <img src={AhtanHighlights} />\n            </div>\n\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-12\">\n              <h3>The Lineage coalition</h3>\n            </div>\n          </div>\n          <div className=\"row\">\n\n            {/* Art Coordinator */}\n            <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a target=\"_blank\" href=\"https://www.instagram.com/samkimball__/\">\n                    <h4>@samkimball__<br /><span className=\"title\">Artisan Coordinator</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            {/* Concept Artist 1 */}\n            <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a target=\"_blank\" href=\"https://www.instagram.com/viq_with_a_pen/\">\n                    <h4>@viq<br /><span className=\"title\">Concept Artisan</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            {/* Yoman */}\n            <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a target=\"_blank\" href=\"https://twitter.com/yoman301\">\n                    <h4>@yoman301<br /><span className=\"title\">Loresmith</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            {/* Sambino */}\n            <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a target=\"_blank\" href=\"https://twitter.com/sambino\">\n                    <h4>@sambino<br /><span className=\"title\">Community Oracle</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            {/* Community Manager */}\n            <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a target=\"_blank\" href=\"https://twitter.com/nftyktty\">\n                    <h4>@nftyktty<br /><span className=\"title\">Community Oracle</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            {/* Prince */}\n            <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a href=\"\">\n                    <h4>@prince<br /><span className=\"title\">Growth Artificer</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            {/* Nate */}\n            <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a href=\"\">\n                    <h4>@geko<br /><span className=\"title\">Growth Artificer</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            {/* Dusty */}\n            {/* <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a href=\"\">\n                    <h4>@dustysky<br /><span className=\"title\">Growth Engineer</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div> */}\n\n            {/* FY */}\n            {/* <div className=\"col-lg-3 col-md-4 col-sm-6\">\n              <div className=\"profile-card-small\">\n                <div className=\"content-chunk\">\n                  <a href=\"\">\n                    <h4>@FY<br /><span className=\"title\">Growth Engineer</span></h4>\n                  </a>\n                </div>\n              </div>\n            </div> */}\n\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Team;\n","import {\n  HashRouter as Router,\n  // BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport Home from \"./Home\";\nimport Team from \"./Team\";\nimport Mint from \"./Mint\";\nimport NewMint from \"./mint-page/App\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/team\">\n            <Team />\n          </Route>\n          <Route path=\"/mint\">\n            <NewMint />\n          </Route>\n        </Switch>\n        <Footer />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/crest_backplate.ff288fde.png\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport { SystemProgram } from \"@solana/web3.js\";\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat(\"en-US\", {\n  style: \"decimal\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return \"--\";\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  \"gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs\"\n);\n\nexport const CIVIC_GATEKEEPER_NETWORK =\n  \"ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6\";\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from(\"expire\")],\n    CIVIC\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from(\"gateway\"),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","/* eslint-disable */\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\nimport { sendTransactions, SequenceType } from \"./connection\";\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from \"./utils\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: null | anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  const subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  try {\n    await connection.removeSignatureListener(subId);\n  } catch (e) {\n    // ignore\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"processed\",\n  });\n\n  const getProgramState = async (): Promise<[anchor.Program, any]> => {\n    const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n    const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n    const state: any = await program.account.candyMachine.fetch(candyMachineId);\n    return [program, state];\n  };\n\n  const getCurrentBlockTime = async (): Promise<number> => {\n    const slot = await connection.getSlot();\n    return (await connection.getBlockTime(slot)) ?? new Date().getTime() / 1000;\n  };\n\n  const [[program, state], currentBlockTime] = await Promise.all([\n    getProgramState(),\n    getCurrentBlockTime(),\n  ]);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n  const timeDiff = new Date().getTime() / 1000 - currentBlockTime;\n  const goLiveDate =\n    state.data.goLiveDate !== null ? state.data.goLiveDate + timeDiff : null;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"candy_machine\"), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from(\"collection\"), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"collection_authority\"),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        [],\n        []\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log(\"SetupState: \", setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1\n        ),\n      ]\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: payer,\n        isWritable: false,\n        isSigner: true,\n      });\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: payer,\n      isWritable: false,\n      isSigner: true,\n    });\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress\n  );\n\n  console.log(remainingAccounts.map((rm) => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    })\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log(\"Collection PDA: \", collectionPDA.toBase58());\n        console.log(\"Authority: \", candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          })\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions];\n  const signersMatrix = [signers];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        \"singleGossip\",\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions\n      )\n    ).txs.map((t) => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n"],"sourceRoot":""}